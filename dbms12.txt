SQL>  CREATE OR REPLACE FUNCTION factorial(n IN NUMBER) RETURN NUMBER
  2      IS
  3     BEGIN
  4        -- base case
  5        IF n = 0 OR n = 1 THEN
  6          RETURN 1;
  7       ELSE
  8          -- recursive case
  9          RETURN n * factorial(n - 1);
 10       END IF;
 11     END;
 12     /

Function created.

SQL> DECLARE
  2        n NUMBER := 5;
  3        fact NUMBER;
  4      BEGIN
  5        fact := factorial(n);
  6        DBMS_OUTPUT.PUT_LINE('Factorial of ' || n || ' is ' || fact);
  7      END;
  8      /

PL/SQL procedure successfully completed.

SQL> 
SQL> set serveroutput on;
SQL> DECLARE
  2        n NUMBER := 5;
  3        fact NUMBER;
  4      BEGIN
  5        fact := factorial(n);
  6        DBMS_OUTPUT.PUT_LINE('Factorial of ' || n || ' is ' || fact);
  7      END;
  8      /
Factorial of 5 is 120                                                           

PL/SQL procedure successfully completed.

SQL> 
SQL> CREATE OR REPLACE FUNCTION is_prime(n IN NUMBER) RETURN BOOLEAN
  2     IS
  3        divisor NUMBER := 2;
  4      BEGIN
  5       IF n <= 1 THEN
  6          RETURN FALSE;
  7        END IF;
  8  
  9        WHILE divisor <= SQRT(n) LOOP
 10         IF MOD(n, divisor) = 0 THEN
 11           RETURN FALSE;
 12         END IF;
 13         divisor := divisor + 1;
 14       END LOOP;
 15  
 16       RETURN TRUE;
 17     END;
 18     /

Function created.

SQL> DECLARE
  2        n NUMBER := 301;
  3     BEGIN
  4        IF is_prime(n) THEN
  5          DBMS_OUTPUT.PUT_LINE(n || ' is a prime number.');
  6        ELSE
  7          DBMS_OUTPUT.PUT_LINE(n || ' is not a prime number.');
  8        END IF;
  9      END;
 10    /
301 is not a prime number.                                                      

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE FUNCTION average_of_two_numbers (
  2          num1 NUMBER,
  3          num2 NUMBER
  4      ) RETURN NUMBER IS
  5          avg_num NUMBER;
  6      BEGIN
  7          avg_num := (num1 + num2) / 2;
  8          RETURN avg_num;
  9      END;
 10     /

Function created.

SQL> SELECT average_of_two_numbers(20,60) FROM dual;

AVERAGE_OF_TWO_NUMBERS(20,60)                                                   
-----------------------------                                                   
                           40                                                   

SQL> CREATE OR REPLACE FUNCTION get_max_cgpa RETURN NUMBER
  2      IS
  3       max_cgpa NUMBER;
  4      BEGIN
  5        SELECT MAX(cgpa) INTO max_cgpa FROM Student;
  6        RETURN max_cgpa;
  7      END;
  8      /

Warning: Function created with compilation errors.

SQL> CREATE TABLE Student (
  2       Sno NUMBER,
  3        sname VARCHAR2(50),
  4        dept VARCHAR2(50),
  5        cgpa NUMBER
  6      );

Table created.

SQL> INSERT INTO Student (Sno, sname, dept, cgpa)
  2      VALUES (1, 'John', 'CSE', 8.5);

1 row created.

SQL> INSERT INTO Student (Sno, sname, dept, cgpa)
  2      VALUES (2, 'Jane', 'CSE', 9.0);

1 row created.

SQL> INSERT INTO Student (Sno, sname, dept, cgpa)
  2      VALUES (3, 'Mike', 'CSE', 7.5);

1 row created.

SQL> CREATE OR REPLACE FUNCTION get_cse_student_count RETURN NUMBER
  2      IS
  3        cse_count NUMBER;
  4      BEGIN
  5       SELECT COUNT(*) INTO cse_count FROM Student WHERE dept = 'CSE';
  6        RETURN cse_count;
  7      END;
  8      /

Function created.

SQL> 
SQL> DECLARE
  2        cse_count NUMBER;
  3      BEGIN
  4        cse_count := get_cse_student_count;
  5        DBMS_OUTPUT.PUT_LINE('Number of students in CSE department: ' || cse_count);
  6      END;
  7      /
Number of students in CSE department: 3                                         

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> spool off;
